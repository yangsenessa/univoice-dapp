type ComfyUINode = record {
    ai_node : text;
    status : text;
};

type Subscriber = record {
    topic : text;
};

type WorkLoadInitParam = record {
    token_block : nat;
    poll_account : text;
    nft_collection_id : text;
};

type ComfyUIPayload = record {
    promt_id : text;
    client_id : text;
    ai_node : text;
    app_info : text;
    wk_id : text;
    voice_key : text;
    deduce_asset_key : text;
    status : text;
    gmt_datatime : nat64;
};

type WorkLoadLedgerItem = record {
    payload : ComfyUIPayload;
    block_height : nat;
    gmt_datatime : nat64;
};

type UploaderPowContractInput = record {
    principal_id : text;
    prompt_id : text;
};

type UploaderPowContract = record {
    principal_id : text;
    prompt_id : text;
    proof_of_work : nat;
};

type WorkflowLedgerItem = record {
    principal_id : text;
    prompt_json : text;
    gmt_datetime : nat64;
};

type Event0301008 = record {
    topic : text;
    payload : WorkLoadLedgerItem;
};

type CommonInfoCfg = record {
    key : text;
    content : text;
    version : text;
    isvalid : bool;
};

type BatchInfoItem = record {
    key : text;
    content : text;
};

type LicenseCollection = record {
    collection_id : text;
    token_id : vec text;
};

type CustomInfo = record {
    dapp_principal : text;
    wallet_principal : text;
    user_logo : text;
    nick_name : text;
    license_collections : vec LicenseCollection;
};

type LoginType = variant {
    Dapp;
    Wallet;
};

type Result = variant {
    Ok : WorkLoadLedgerItem;
    Err : text;
};

type Result_1 = variant {
    Ok : vec WorkflowLedgerItem;
    Err : text;
};

service : {
    greet : (text) -> (text) query;
    query_comfy_nodes : () -> (opt vec ComfyUINode) query;
    reg_comfy_nodes : (vec ComfyUINode) -> (opt vec ComfyUINode);
    gen_ai_node_router : () -> (opt ComfyUINode) query;
    export_minting_contract : () -> (opt WorkLoadInitParam) query;
    update_minting_contract : (WorkLoadInitParam) -> (opt WorkLoadInitParam);
    subscribe : (Subscriber) -> ();
    push_workload_record : (ComfyUIPayload) -> (Result);
    export_all_uploader_pow_contracts : () -> (vec UploaderPowContract) query;
    query_curr_workload : () -> (opt vec WorkLoadLedgerItem) query;
    store_uploader_pow_contract : (UploaderPowContractInput) -> (Result);
    store_workflow_data : (text, text) -> (Result);
    fetch_workflow_data : (text) -> (text) query;
    query_workflow_ledger_by_principal_id : (text) -> (Result_1) query;
    query_wait_identity_workflows : () -> (vec text) query;
    query_wait_training_workflows : () -> (vec text) query;
    add_info_item : (text, text) -> (Result);
    batch_add_info_items : (vec BatchInfoItem) -> (Result);
    get_info_by_key : (text) -> (opt CommonInfoCfg) query;
    batch_get_info : (vec text) -> (vec opt CommonInfoCfg) query;
    update_info_item : (text, text) -> (Result);
    add_custom_info : (CustomInfo) -> (Result);
    get_custom_info : (LoginType, text) -> (opt CustomInfo) query;
    get_custom_info_list : (nat32, nat32) -> (vec CustomInfo) query;
};