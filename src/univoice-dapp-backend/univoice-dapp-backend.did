type Account = record {
    owner: principal;
    subaccount: opt vec nat8;
};

type Account__3 = record {
    owner: principal;
    subaccount: opt vec nat8;
};

type NFTCollection = record {
    name: text;
    symbol: text;
    description: opt text;
    logo: opt text;
    supply_cap: opt nat;
    total_supply: nat;
    owner: principal;
    allowed_transfers: bool;
    expired_at: opt nat64;
};

type UserNFTHolding = record {
    owner: principal;
    nft_colletion_id: text;
    token_ids: vec nat;
    expired_at: opt nat64;
};

type UserLicenseRecord = record {
    owner: text;
    nft_collection_id: text;
    license_name: text;
    token_id: nat;
    purchase_time: nat64;
    expired_at: opt nat64;
};

type UserNFTsRequest = record {
    user: text;
    license_ids: vec text;
};

type UserNFTsResponse = record {
    holdings: vec UserNFTHolding;
};
type BatchInfoItem = record {
    key: text;
    content: text;
};

type CommonInfoCfg = record {
    key: text;
    content: text;
    version: text;
    isvalid: bool;
};

type CustomInfo = record {
    dapp_principal: text;
    wallet_principal: text;
    nick_name: text;
    logo: text;
    is_invite_code_filled: bool;
    invite_code: text;
    used_invite_code: opt text;
    total_rewards: nat64;
};

type InviteCode = record {
    code: text;
    owner: text;
    created_at: nat64;
    is_used: bool;
    used_by: opt text;
};

type InviteRewardRecord = record {
    id: text;
    invite_code: text;
    code_owner: text;
    new_user: text;
    token_amount: nat;
    created_at: nat64;
    is_claimed: bool;
    claimed_at: opt nat64;
};

type LicenseFetchResult = variant {
    Ok: record {
        vec UserLicenseRecord;
        NFTCollection;
    };
    Err: text;
};

type FileMetadata = record {
    name: text;
    content_type: text;
    size: nat64;
    filled: nat64;
    created_at: nat64;
    updated_at: nat64;
    chunks: nat32;
    hash: opt vec nat8;
};

type Quest = record {
    quest_id: nat64;
    quest_name: text;
    reward_amount: nat64;
    redirect_url: text;
    is_completed: bool;
};

type PolicyResult = variant {
    Ok: null;
    Err: text
};

type InvitedUser = record {
    dapp_principal: text;
    wallet_principal: text;
    nick_name : text;
    logo : text;
    reward_amount : nat64;
};

type InvitedUserResponse = record {
    total_invited : nat64;
    users : vec InvitedUser;
};

service : {
    // Common Info Management
    "add_info_item": (key: text, content: text) -> (variant { Ok; Err: text; });
    "get_info_by_key": (key: text) -> (opt CommonInfoCfg) query;
    "batch_add_info_items": (vec BatchInfoItem) -> (variant { Ok; Err: text; });
    "batch_get_info": (vec text) -> (vec opt CommonInfoCfg) query;
    "update_info_item": (key: text, content: text) -> (variant { Ok; Err: text; });

    // Custom Info Management
    "add_custom_info": (CustomInfo) -> (variant { Ok; Err: text; });
    "get_custom_info": (opt text, opt text) -> (opt CustomInfo) query;
    "update_custom_info": (opt text, opt text, text, text) -> (variant { Ok; Err: text; });
    "list_custom_info": (nat64, nat64) -> (vec CustomInfo) query;
    "get_invited_users": (opt text, opt text) -> (InvitedUserResponse) query;

    // Invite Code Management
    "create_invite_code": (owner: text) -> (variant { Ok: InviteCode; Err: text; });
    "use_invite_code": (code: text, new_user: text) -> (variant { Ok: InviteRewardRecord; Err: text; });
    "submit_invite_code": (opt text, opt text, text) -> (bool);
//    "claim_reward": (reward_id: text) -> (variant { Ok: InviteRewardRecord; Err: text; });
    "claim_reward": (opt text, opt text, nat64) -> (bool);
    "get_user_rewards": (user_principal: text) -> (vec InviteRewardRecord) query;
    "verify_invite_code": (code: text) -> (opt InviteCode) query;
    // NFT Management
    "get_user_nfts": (UserNFTsRequest) -> (variant { Ok: UserNFTsResponse; Err: text; });
    "get_nft_collection": (collection_id: text) -> (variant { Ok: NFTCollection; Err: text; });
    "buy_nft_license": (buyer: text, collection_id: text, quantity: nat64) -> (LicenseFetchResult);

    // Quests
    "get_quest_list": (opt text, opt text) -> (vec Quest) query;

    //ic_oss
    "attach_policies": (text, text, text, text) -> (PolicyResult);
    "detach_policies": (text, text, text, text) -> (PolicyResult);
    "get_access_token": (text, text, text) -> (text);
};