type BatchInfoItem = record {
    key: text;
    content: text;
};

type CommonInfoCfg = record {
    key: text;
    content: text;
    version: text;
    isvalid: bool;
};

type CustomInfo = record {
    dapp_principal: text;
    wallet_principal: text;
    nick_name: text;
    logo: text;
};

type InviteCode = record {
    code: text;
    owner: text;
    created_at: nat64;
    is_used: bool;
    used_by: opt text;
};

type InviteRewardRecord = record {
    id: text;
    invite_code: text;
    code_owner: text;
    new_user: text;
    token_amount: nat;
    created_at: nat64;
    is_claimed: bool;
    claimed_at: opt nat64;
};

service : {
    // Common Info Management
    "add_info_item": (key: text, content: text) -> (variant { Ok; Err: text; });
    "get_info_by_key": (key: text) -> (opt CommonInfoCfg) query;
    "batch_add_info_items": (vec BatchInfoItem) -> (variant { Ok; Err: text; });
    "batch_get_info": (vec text) -> (vec opt CommonInfoCfg) query;
    "update_info_item": (key: text, content: text) -> (variant { Ok; Err: text; });

    // Custom Info Management
    "add_custom_info": (CustomInfo) -> (variant { Ok; Err: text; });
    "get_custom_info": (opt text, opt text) -> (opt CustomInfo) query;
    "update_custom_info": (opt text, opt text, text, text) -> (variant { Ok; Err: text; });
    "list_custom_info": (nat64, nat64) -> (vec CustomInfo) query;

    // Invite Code Management
    "create_invite_code": (owner: text) -> (variant { Ok: InviteCode; Err: text; });
    "use_invite_code": (code: text, new_user: text) -> (variant { Ok: InviteRewardRecord; Err: text; });
    "claim_reward": (reward_id: text) -> (variant { Ok: InviteRewardRecord; Err: text; });
    "get_user_rewards": (user_principal: text) -> (vec InviteRewardRecord) query;
    "verify_invite_code": (code: text) -> (opt InviteCode) query;
};